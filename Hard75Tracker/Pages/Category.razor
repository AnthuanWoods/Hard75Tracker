@page "/category"
@using Hard75Tracker.Models
@using Newtonsoft.Json;
@using BootstrapBlazor;

<PageTitle>Category Management</PageTitle>


<Modal @ref="modal">
    <BodyTemplate>
        @if (categoryMethod == "create")
        {
            <EditForm id="CreateTask" Model="@cat" OnValidSubmit="@createNewCategory" FormName="CreateCategoryForm">
                <div class="row">
                    <label for="categoryName">
                        Category Name:
                    </label><br />
                    <input @bind-value="cat!.categoryName" name="categoryName" type="text" style="width: inherit;" />
                </div>
            </EditForm>
        }        
    </BodyTemplate>
    <FooterTemplate>
        @if (categoryMethod == "create")
        {
            <button class="btn btn-success col-6" type="submit" form="CreateCategory">
                Create New Category
            </button>
        }
        <button class="btn btn-success col-6" @onclick="OnHideModalClick">
            Close
        </button>
    </FooterTemplate>
</Modal>

<div>
    
    @if (errorMessage.Length > 0)
    {//Display error message in an alert box.
        <div>
            <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
            </div>
    }
    else if (successMessage.Length > 0)
    {
        <div>
            <Alert Color="AlertColor.Success"> @successMessage </Alert>
            </div>
    }

    <h1 style="text-align:center;margin-bottom: 20px;margin-top: revert;">
        75 Hard Investment
    </h1>

    <h2>
        This page is used to manage the category or grouping of tasks.
    </h2>

    <Button Color="ButtonColor.Success" @onclick="NewCategoryComponent" Style="margin-bottom:10px;">
        Create Category
    </Button>


    <Grid @ref="grid" TItem="Hard75Shared.Category" Class="table table-hover table-bordered table-striped" DataProvider="CategoryDataProvider" AllowFiltering="true" Responsive="true" EmptyText="There are no active tasks.">
        <GridColumn TItem="Hard75Shared.Category" HeaderText="Name">
            @context.categoryName
        </GridColumn>
        <GridColumn TItem="Hard75Shared.Category" Filterable="false" Sortable="false">
            <HeaderContent>
                Edit
            </HeaderContent>
            <ChildContent>
                <Button Color="ButtonColor.Info" @onclick="@(e => ShowCategoryComponent(@context))">Edit</Button>
            </ChildContent>
        </GridColumn>
    </Grid>

    

    <table>
        <tr>
            Category
        </tr>
        <tr style="padding-left:30px;">
            <input type="checkbox" name="Task1" />
            <label for="Task1">Task 1</label>
        </tr>
        <tr style="padding-left:60px;">
            <input type="checkbox" name="Task1.1" />
            <label for="Task1.1">Task .11</label>
        </tr>
    </table>
</div>

@inject NavigationManager UriHelper
@inject SessionStorageAccessor SessionStorageAccessor
@inject ICategoryHttpRepository CategoryRepo
@code {
    public int CurrentStreak = 0;
    public int MaxStreak = 0;
    string errorMessage = "";
    string successMessage = "";
    string categoryMethod = "";
    private Modal modal = default!;
    BlazorBootstrap.Grid<Hard75Shared.Category> grid = default!;
    Hard75Shared.Category cat;
    string userID = null;
    string userEmail = null;
    private IEnumerable<Hard75Shared.Category> categories = default!;
    private Hard75Shared.Category[]? currentCategories;

    protected override async Task OnInitializedAsync()
    {
        userID = await SessionStorageAccessor.GetValueAsync<string>("userID");
        userEmail = await SessionStorageAccessor.GetValueAsync<string>("userEmail");
        if ((userEmail == null) || (userID == null))
        {
            UriHelper.NavigateTo("");
        }
    }

    private async Task<GridDataProviderResult<Hard75Shared.Category>> CategoryDataProvider(GridDataProviderRequest<Hard75Shared.Category> request)
    {
        try
        {
            if (userID == null)
            {
                userID = await SessionStorageAccessor.GetValueAsync<string>("userID");
            }
            Hard75Shared.Response apiResponse = await CategoryRepo.ReadCategory(userID);

            if (categories == null) // pull employees only one time for client-side filtering, sorting, and paging
                categories = GetListofCategories(apiResponse); // call a service or an API to pull the employees

            if (categories == null)
            {
                return (new GridDataProviderResult<Hard75Shared.Category> { Data = new List<Hard75Shared.Category>(), TotalCount = 0 });
            }
            else
            {
                return await Task.FromResult(request.ApplyTo(categories));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return null;
        }
    }

    private IEnumerable<Hard75Shared.Category> GetListofCategories(Hard75Shared.Response apiResponse)
    {
        if (apiResponse.statusCode < 100)
        {
            errorMessage = apiResponse.message;
            return currentCategories;
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {
            //Success
            if (apiResponse.message == "{}")
            {
                return currentCategories;
            }
            else
            {
                List<Hard75Shared.Category> currentCategories = JsonConvert.DeserializeObject<List<Hard75Shared.Category>>(apiResponse.message);
                return currentCategories;
            }
        }
        else
        {
            return currentCategories;
        }
    }

    private async System.Threading.Tasks.Task createNewCategory()

    {
        Hard75Shared.Response apiResponse = await CategoryRepo.CreateCategory(cat);
        if (apiResponse.statusCode < 100)
        {
            errorMessage = apiResponse.message;
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {

            Console.WriteLine(apiResponse.message);
            successMessage = "Category successfully created.";
            grid.RefreshDataAsync();

        }
        else
        {
            errorMessage = apiResponse.message;
        }

    }

    private async Task ShowCategoryComponent(Hard75Shared.Category t)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("method", "update");
        categoryMethod = "update";
        cat = t;
        cat.userID = Int32.Parse(userID);
        await modal.ShowAsync();
    }

    private async Task NewCategoryComponent()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("method", "create");
        categoryMethod = "create";
        cat = new Hard75Shared.Category();
        cat.userID = Int32.Parse(userID);
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
}