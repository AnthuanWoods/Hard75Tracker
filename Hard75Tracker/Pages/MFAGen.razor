@page "/mfagen"
@layout FullPageLayout
@using Hard75Tracker.Models
@using Newtonsoft.Json;
@using Microsoft.Extensions.Logging;
@using BootstrapBlazor;

<PageTitle>MFA Generation</PageTitle>

<div>
    <h1 style="text-align:center;margin-bottom: 20px;margin-top: revert;">
        75 Hard Investment
    </h1>

    @if (errorMessage.Length > 0)
    {//Display error message in an alert box.
    <div>
            <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
    </div>
    }
    <div class="col-12 offset-sm-3 col-sm-6">    
        <div class="align-content-center col-12" style="text-align: center;margin-bottom: 20px;">
            An email with an authentication code has been sent to your email address. <br />
            Please enter the code below.
        </div>
        <EditForm Model="@userToValidate" OnValidSubmit="@verifyNumber" FormName="LoginAttemptForm">
            <div class="align-content-center col-12" style="text-align: center;margin-bottom: 20px;">
                 <input @bind-value="userToValidate!.numberToVerify" name="mfaCode" type="text" placeholder="Enter MFA Code" />
             </div>
            <div class="align-content-center col-12">
                <button class="btn btn-success col-12">
                    Submit
                </button>
            </div>
        </EditForm>
    </div>
</div>

@inject NavigationManager UriHelper
@inject SessionStorageAccessor SessionStorageAccessor
@inject IUserHttpRepository UserRepo
@code {
    //initialize errorMessage variable
    private string errorMessage = "";
    //initialize userID for session variable
    string userID = "";
    //initialize userEmail for sesion variable
    string userEmail = "";
    //initialize verificationNumber variable for MFA
    int verificationNumber = 0;
    //initialize randomizer variable
    Random rnd = new Random();
    //private class created for the form. Only needed on this page, decided against making a class file.
    private class mfaUser {
        public string numberToVerify { get; set; }
    }
    //initialize local private class for form
    mfaUser userToValidate = new mfaUser();

    //Set the userEmail variable. If no active session, redirect to the startup page.
    protected override async Task OnInitializedAsync()
    {
        //userID = await SessionStorageAccessor.GetValueAsync<string>("userID");
        //setting userEmail variable to session userEmail key.
        userEmail = await SessionStorageAccessor.GetValueAsync<string>("userEmail");
        //redirect to the main page if no active session.
        if (userEmail == null)
        {
            UriHelper.NavigateTo("/");
        }
        //Call the function to send the MFA email
        generateMFAEmail();
    }

    //Generates a random 5 digit number and calls the sendEmail function.
    public void generateMFAEmail()
    {
        //assign a random 5 digit number to the verificationNumber variable
        verificationNumber = rnd.Next(10000, 99999);
        //create the email body string
        string emailBody = "<html><body>The verification code is " + verificationNumber.ToString() + ".</body></html>";
        //call the sendEmail function.
        var emailSent = UserRepo.sendEmail(userEmail, "Verification Code", emailBody);
    }

    //Verify the input matches the expected MFA value and verifies the user exists in the database before proceeding to the main Routine page.
    public async Task verifyNumber(){
        //Decides if the number matches the expected number. If it matches, continue. If it does not match, generate another MFA email with a new number.
        if (userToValidate.numberToVerify == verificationNumber.ToString()){
            //Calls the ReadUser function to determine if the useremail exists within the system.
            Hard75Shared.Response apiResponse = await UserRepo.ReadUser(userEmail);
            if (apiResponse.statusCode < 100)
            {
                errorMessage = apiResponse.message;
            }
            else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
            {
                //Create the userConfirmed variable and add available user information.
                Hard75Shared.UserAccount userConfirmed = JsonConvert.DeserializeObject<Hard75Shared.UserAccount>(apiResponse.message);
                //Assign the session key userID to the ID of the current user
                await SessionStorageAccessor.SetValueAsync("userID", userConfirmed.userID);
                //Navigate to the routine page.
                UriHelper.NavigateTo("/routine");
            }
            else {
                errorMessage = apiResponse.message;
            }
        }
        else
        {
            errorMessage = "That was not the expected number. A new email will be generated.";
            //generate another MFA email, changing the expected number.
            generateMFAEmail();
        }
    }

}