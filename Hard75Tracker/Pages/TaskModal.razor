@using Hard75Tracker.Models;

@if(method == "create"){
    <EditForm Model="@task" OnValidSubmit="@createNewTask" FormName="CreateTaskForm">
        <div class="row">
            <label for="taskName">
                Task Name:
            </label><br />
            <input @bind-value="task!.taskName" name="taskName" type="text" style="width: inherit;" />
        </div>
        <div class="row">
            <div class="col-5 col-md-3 text-end">Task Description :</div>
            <div class="col-7 col-md-9">@task?.taskDescription</div>
        </div>
        <hr/>
        <button class="btn btn-success col-6">
            Create New Task
        </button>
    </EditForm>
}else if(method == "update"){
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Id :</div>
        <div class="col-7 col-md-9">@task?.taskID</div>
    </div>
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Name :</div>
        <div class="col-7 col-md-9">@task?.taskName</div>
    </div>
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Description :</div>
        <div class="col-7 col-md-9">@task?.taskDescription</div>
    </div>
}else if(method == "view"){
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Id :</div>
        <div class="col-7 col-md-9">@task?.taskID</div>
    </div>
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Name :</div>
        <div class="col-7 col-md-9">@task?.taskName</div>
    </div>
    <div class="row">
        <div class="col-5 col-md-3 text-end">Task Description :</div>
        <div class="col-7 col-md-9">@task?.taskDescription</div>
    </div>
}

@inject SessionStorageAccessor SessionStorageAccessor
@inject ITaskHttpRepository TaskRepo
@code {
    //private Hard75Shared.Task? task;

    [Parameter] public string method { get; set; }
    [Parameter] public Hard75Shared.Task task { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    protected override void OnInitialized()
    {
        // get employee with {EmployeeId} from DB

        //task = new Hard75Shared.Task { FirstName = "Vikram", LastName = "Reddy" };
        if(method == "create")
        {
            task = new Hard75Shared.Task();
            //string userID = await SessionStorageAccessor.GetValueAsync<string>("userID");
            //task.userID = (int)userID;
        }
        base.OnInitialized();
    }

    private async System.Threading.Tasks.Task createNewTask()
    {
        
        /*Hard75Shared.Response apiResponse = await TaskRepo.CreateTask(newuser);
        if (apiResponse.statusCode < 100)
        {
            //errorMessage = apiResponse.message;
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {
            
        }*/
    }
}