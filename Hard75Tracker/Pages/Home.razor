@page "/"
@layout FullPageLayout
@using Hard75Shared
@using Hard75Tracker.Models
@using Newtonsoft.Json;
@using Microsoft.Extensions.Logging;
@using BootstrapBlazor;

<PageTitle>Home</PageTitle>

<div>
    <h1 style="text-align:center;margin-bottom: 20px;margin-top: revert;">
        75 Hard Investment
    </h1>
    @if (errorMessage.Length > 0) //Display error message in a red Alert on page if error received from API call
    {
    <div>
            <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
    </div>
    }
    <div class="col-12 offset-sm-3 col-sm-6">
        <EditForm Model="@userAttempt" OnValidSubmit="@AttemptLogin" FormName="LoginAttemptForm">
            <div class="col-12" style="margin-bottom: 20px;">
                <label for="email">
                    Email:
                </label><br/>
                <input @bind-value="userAttempt!.email" name="email" type="text" style="width: inherit;" />
            </div>
            <div class="col-12" style="margin-bottom: 20px;">
                <label for="pwd">
                    Password:
                </label> <br/>
                <input @bind-value="userAttempt!.pwd" name="pwd" type="password" style="width: inherit;" />
            </div>
            <div class="col-12">
                <button class="btn btn-success col-12" type="submit">
                    Login
                </button>
                <button class="btn btn-link col-12" style="text-align:end;">
                    <NavLink class="nav-link" href="registration" style="padding: revert;color: inherit;">Forgot Password?</NavLink>
                </button>
            </div>
        </EditForm>
        <div class="separator" style="display: flex;align-items: center;">
            <div class="line" style="flex-grow: 1; border-bottom: 1px solid #000; /* You can customize the color */ margin: 0 10px; /* Adjust the margin as needed */"></div>
            <div class="text">OR</div>
            <div class="line" style="flex-grow: 1; border-bottom: 1px solid #000; /* You can customize the color */ margin: 0 10px; /* Adjust the margin as needed */"></div>
        </div>
        <button class="btn btn-warning col-12 col-sm-9 col-md-7 col-lg-5 col-xl-4">
            <NavLink class="nav-link" href="registration" style="padding: revert;color: inherit;">Register Now</NavLink>
        </button>
    </div>
</div>

@inject IUserHttpRepository UserRepo
@inject NavigationManager UriHelper
@inject SessionStorageAccessor SessionStorageAccessor
@code{
    //Initialize the userAttempt variable for the landing page form.
    private Hard75Shared.UserAccount userAttempt = new Hard75Shared.UserAccount();
    //Initialize the error message variable.
    string errorMessage = "";

    //Clear session variables once on landing page
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await SessionStorageAccessor.RemoveAsync("userEmail");
        await SessionStorageAccessor.RemoveAsync("userID");
    }

    //User submits the LoginAttemptForm Form. If incorrect or error in the API call, the response will be stored in the errorMessage variable.
    //If the email and password combination is correct, navigate to the mfa page for email MFA.
    private async System.Threading.Tasks.Task AttemptLogin(EditContext editContext){
        try
        {
            Hard75Shared.UserAccount userLoginAttempt = new Hard75Shared.UserAccount();
            userLoginAttempt.email = userAttempt.email;
            userLoginAttempt.pwd = userAttempt.pwd;
            Hard75Shared.Response userConfirmation = await UserRepo.LoginUser(userLoginAttempt);
            //Generic API standards: status Codes under 100 are handled
            if (userConfirmation.statusCode < 100)
            {
                //Set the error message variable
                errorMessage = userConfirmation.message;
            }
            //Status codes greater than 900 are exception error codes. 
            else if (userConfirmation.statusCode >= 100 && userConfirmation.statusCode < 900)
            {
                //set the userEmail Session Key
                await SessionStorageAccessor.SetValueAsync("userEmail", userAttempt.email);
                //Navigate to the mfa page.
                UriHelper.NavigateTo("/mfagen");
            }
            return;
        } catch(Exception ex)
        {
            return;
        }
    }

    private void ForgotPassword(){

    }
}