@page "/tasks"
@using Hard75Tracker.Models
@using Newtonsoft.Json;
@using BlazorBootstrap;

<PageTitle>Task Management</PageTitle>

<Modal @ref="modal" />

<Modal @ref="modal2">
    <BodyTemplate>
        @if (taskMethod == "create")
        {
            <EditForm id="CreateTask" Model="@task" OnValidSubmit="@createNewTask" FormName="CreateTaskForm">
                <div class="row">
                <label for="taskName">
                    Task Name:
                </label><br />
                <input @bind-value="task!.taskName" name="taskName" type="text" style="width: inherit;" />
            </div>
            <div class="row">
                <label for="taskDescription">
                    Task Description:
                </label><br />
                <input @bind-value="task!.taskDescription" name="taskName" type="text" style="width: inherit;" />
            </div>
        </EditForm>
        }
        else @if (taskMethod == "update")
        {
            <EditForm id="CreateTask" Model="@task" OnValidSubmit="@updateTask" FormName="CreateTaskForm">
                <div class="row">
                    <label for="taskName">
                        Task Name:
                    </label><br />
                    <input @bind-value="task!.taskName" name="taskName" type="text" style="width: inherit;" />
                </div>
                <div class="row">
                    <label for="taskDescription">
                        Task Description:
                    </label><br />
                    <input @bind-value="task!.taskDescription" name="taskName" type="text" style="width: inherit;" />
                </div>
            </EditForm>
        }
        else @if (taskMethod == "remove")
        {
            <EditForm id="CreateTask" Model="@task" OnValidSubmit="@deleteTask" FormName="CreateTaskForm">
                <div class="row">
                    <label for="taskName">
                        Task Name:
                    </label><br />
                    <input @bind-value="task!.taskName" name="taskName" type="text" style="width: inherit;" disabled/>
                </div>
                <div class="row">
                    <label for="taskDescription">
                        Task Description:
                    </label><br />
                    <input @bind-value="task!.taskDescription" name="taskName" type="text" style="width: inherit;" disabled/>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        @if (taskMethod == "create")
        {
            <button class="btn btn-success col-6" type="submit" form="CreateTask">
                Create New Task
            </button>
        }
        else if (taskMethod == "update")
        {
            <button class="btn btn-success col-6" type="submit" form="CreateTask">
                Update Task
            </button>
        }
        else if (taskMethod == "remove")
        {
            <button class="btn btn-danger col-6" type="submit" form="CreateTask">
                Delete Task
            </button>
        }
        <button class="btn btn-success col-6" @onclick="OnHideModalClick">
            Close
        </button>
    </FooterTemplate>
</Modal>

<div>
    <div style="margin-bottom: 30px;">
        <h1 style="text-align:center;margin-bottom: 20px;margin-top: revert;">
            Task Management
        </h1>
        @if (errorMessage.Length > 0)
        {//Display error message in an alert box.
            <div>
                <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
            </div>
        }else if(successMessage.Length > 0)
        {
            <div>
                <Alert Color="AlertColor.Success"> @successMessage </Alert>
            </div>
        }
        <p>
            This page is used to manage individual tasks.
        </p>
    </div>
    
    <Button Color="ButtonColor.Success" @onclick="NewTaskComponent" Style="margin-bottom:10px;">
        Add Task
    </Button>
    
    <Grid @ref="grid" TItem="Hard75Shared.Task" Class="table table-hover table-bordered table-striped" Data="datatasks" AllowFiltering="true" Responsive="true" EmptyText="There are no active tasks.">
        <GridColumn TItem="Hard75Shared.Task" HeaderText="Name">
            @context.taskName
        </GridColumn>
        <GridColumn TItem="Hard75Shared.Task" Filterable="false" Sortable="false">
            <HeaderContent>
                Edit
            </HeaderContent>
            <ChildContent>
                <Button Color="ButtonColor.Info" @onclick="@(e => ShowTaskComponent(@context))">Edit</Button>
                <Button Color="ButtonColor.Danger" @onclick="@(e => DeleteTaskComponent(@context))">Remove</Button>
            </ChildContent>
        </GridColumn>
    </Grid>
</div>

@inject NavigationManager UriHelper
@inject SessionStorageAccessor SessionStorageAccessor
@inject ITaskHttpRepository TaskRepo
@code {
    public int CurrentStreak = 0;
    public int MaxStreak = 0;
    private Hard75Shared.Task[]? currentTasks;
    string userID = null;
    string errorMessage = "";
    string successMessage = "";
    BlazorBootstrap.Grid<Hard75Shared.Task> grid = default!;
    private List<Hard75Shared.Task> datatasks = new List<Hard75Shared.Task>();
    private IEnumerable<Hard75Shared.Task> tasks = default!;
    private Modal modal = default!;
    private Modal modal2 = default!;
    string userEmail;
    public Hard75Shared.Task task;
    public string taskMethod = "";
    protected override async Task OnInitializedAsync()
    {
        userID = await SessionStorageAccessor.GetValueAsync<string>("userID");
        userEmail = await SessionStorageAccessor.GetValueAsync<string>("userEmail");
        if ((userEmail == null) || (userID == null))
        {
            UriHelper.NavigateTo("");
        }
        Hard75Shared.Response apiResponse = await TaskRepo.ReadTask(userID);
        datatasks = GetListofTasks(apiResponse);
        await grid.RefreshDataAsync();
    }

    private List<Hard75Shared.Task> GetListofTasks(Hard75Shared.Response apiResponse)
    {
        if (apiResponse.statusCode < 100)
        {
            errorMessage = apiResponse.message;
            return null;
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {
            //Success
            if (apiResponse.message == "{}")
            {
                return null;
            }
            else{
                List<Hard75Shared.Task> currentTasks = JsonConvert.DeserializeObject<List<Hard75Shared.Task>>(apiResponse.message);
                return currentTasks;
            }
        }
        else
        {
            return null;
        }
    }

    private async Task ShowTaskComponent(Hard75Shared.Task t) 
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("method", "update");
        taskMethod = "update";
        task = t;
        task.userID = Int32.Parse(userID);
        await modal2.ShowAsync();
    }

    private async Task DeleteTaskComponent(Hard75Shared.Task t)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("method", "remove");
        taskMethod = "remove";
        task = t;
        task.userID = Int32.Parse(userID);
        await modal2.ShowAsync();
    }

    private async Task NewTaskComponent()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("method", "create");
        taskMethod = "create";
        task = new Hard75Shared.Task();
        task.userID = Int32.Parse(userID);
        await modal2.ShowAsync();
    }

    private async System.Threading.Tasks.Task createNewTask()

    {
        Hard75Shared.Response apiResponse = await TaskRepo.CreateTask(task);
        await modal2.HideAsync();
        if (apiResponse.statusCode < 100)
        {
            errorMessage = apiResponse.message;
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {

            Console.WriteLine(apiResponse.message);
            successMessage = "Task successfully created.";
            Hard75Shared.Response apiResponse2 = await TaskRepo.ReadTask(userID);
            datatasks = GetListofTasks(apiResponse2);
            await grid.RefreshDataAsync();

        }
        else
        {
            errorMessage = apiResponse.message;
        }

    }

    private async System.Threading.Tasks.Task updateTask()

    {
        Hard75Shared.Response apiResponse = await TaskRepo.UpdateTask(task);
        
        if (apiResponse.statusCode < 100)
        {
            errorMessage = apiResponse.message;
            await modal2.HideAsync();
        }
        else if (apiResponse.statusCode >= 100 && apiResponse.statusCode < 900)
        {

            Console.WriteLine(apiResponse.message);
            Console.WriteLine(task.active);
            Console.WriteLine("Updating Task Complete");
            if (task.active == 0)
            {
                successMessage = "Task successfully deleted.";
                Console.WriteLine("Updating Task Complete2");
            }
            else
            {
                successMessage = "Task successfully updated.";
            }
            Hard75Shared.Response apiResponse2 = await TaskRepo.ReadTask(userID);
            datatasks = new List<Hard75Shared.Task>();
            datatasks = GetListofTasks(apiResponse2);
            Console.WriteLine(apiResponse2);
            await grid.RefreshDataAsync();
            await modal2.HideAsync();

        }
        else
        {
            errorMessage = apiResponse.message;
            await modal2.HideAsync();
        }

        
    }

    private async System.Threading.Tasks.Task deleteTask()

    {
        task.active = 0;
        updateTask();
    }

    private async Task OnHideModalClick()
    {
        await modal2.HideAsync();
    }

}